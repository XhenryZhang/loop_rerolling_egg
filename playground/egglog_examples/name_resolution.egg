(datatype Math
  (Add Math Math)
  (Num i64))
  
; =============================
; (function Num (i64) Math)
; (function zero () Math)
; (set (zero) (Num 0)) ; zero maps to (Num 0), which is assigned a canonical ID
; =============================
(define zero (Num 0))
(set (Num 100) (Num 355))
(union (Num 100) (Num 200))
(union (Num 155) (Num 200))
(check (= (Num 200) (Num 355))) ; semantics: for "num", 100->{canonical id of (Num 355)}
(check (Num 155))

; (union (Add zero (Num 3)) (Num 3))
(define a (Add (Num 0) (Num 3)))
(define b (Add (Num 7) (Num 9)))
(define c (Num 16))
(union b c) ; 

;; zero here refers to the function/constant zero, not a free variable
; rewrite will never fire because program crashes since we set (Num 100) to (Num 355) on line 11
(rewrite (Add zero x) x)

; (num 9) is present the math type's egraph. (Add (Num 7) (Num 9)) adds it to the egraph
(check (Num 9))
(check (Add (Num 0) (Num 3)))
(fail (check (= a (Num 3)))) ; since rewrite never fires

;; crash if we merge two numbers
(rule (
 (= (Num x) (Num y))
 (!= x y)
)(
 (panic "ahhh")
))

(run 10)